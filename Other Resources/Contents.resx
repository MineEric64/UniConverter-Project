<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="HelloWorld" xml:space="preserve">
    <value>Hello, World!</value>
  </data>
  <data name="LED_Converted" xml:space="preserve">
    <value>Converted LED sucessfully!</value>
  </data>
  <data name="LED_Converting" xml:space="preserve">
    <value>Converting Ableton LED to UniPack LED...</value>
  </data>
  <data name="LED_Converting_Error" xml:space="preserve">
    <value>Error occured while converting LED.

Error Message:
{0}</value>
  </data>
  <data name="LED_Converting_Title" xml:space="preserve">
    <value>Converting LED... ({0} / {1})</value>
  </data>
  <data name="LED_Loaded" xml:space="preserve">
    <value>LED Files Loaded! You can edit LEDs in 'keyLED (MIDI Extension)' Tab.</value>
  </data>
  <data name="LED_Not_Found" xml:space="preserve">
    <value>Couldn't find any LED in this project.</value>
  </data>
  <data name="LED_ofd_Filter" xml:space="preserve">
    <value>LED Files|*.mid</value>
  </data>
  <data name="LED_ofd_Title" xml:space="preserve">
    <value>Select LED Files</value>
  </data>
  <data name="LED_Open" xml:space="preserve">
    <value>Loading LED Files... ({0} / {1})</value>
  </data>
  <data name="LED_Open_Title" xml:space="preserve">
    <value>Opening LED Files</value>
  </data>
  <data name="LED_Save_File_Not_Found" xml:space="preserve">
    <value>This project's led made using Midi Extension Plugin.
But Couldn't find Midi Extension data file.

Would you like to select the data file and continue?
(Often data file is in LED File (.mid extension) folder, it doesn't have extension also its name contains 'save')</value>
  </data>
  <data name="LED_Verifying" xml:space="preserve">
    <value>Verifying LED... ({0} / {1})</value>
  </data>
  <data name="Main_OpenAbletonProject" xml:space="preserve">
    <value>Open Ableton Project</value>
  </data>
  <data name="Main_OpenAbletonProject_Beta" xml:space="preserve">
    <value>Open Ableton Project (Beta)</value>
  </data>
  <data name="Project_Chain" xml:space="preserve">
    <value>Finding Chains...</value>
  </data>
  <data name="Project_ChangeExtension" xml:space="preserve">
    <value>Applying to readable Infos...</value>
  </data>
  <data name="Project_DeleteWorkspace" xml:space="preserve">
    <value>Deleting Workspace...</value>
  </data>
  <data name="Project_DeletingTempoaryFiles" xml:space="preserve">
    <value>Deleting The Tempoary Files...</value>
  </data>
  <data name="Project_Extracting" xml:space="preserve">
    <value>Extracting The Project File...</value>
  </data>
  <data name="Project_FileName" xml:space="preserve">
    <value>Finding File Name...</value>
  </data>
  <data name="Project_Loaded" xml:space="preserve">
    <value>Ableton Project File Loaded!
You can edit info in Information Tab.</value>
  </data>
  <data name="Project_Loading" xml:space="preserve">
    <value>Loading The Project File...</value>
  </data>
  <data name="Project_ofd_Filter" xml:space="preserve">
    <value>Ableton Project File|*.als</value>
  </data>
  <data name="Project_ofd_Title" xml:space="preserve">
    <value>Select a Ableton Project File</value>
  </data>
  <data name="Project_Reset" xml:space="preserve">
    <value>Reseting Project...</value>
  </data>
  <data name="Project_sfd_Filter" xml:space="preserve">
    <value>Zip File|*.zip|UniPack File|*.uni</value>
  </data>
  <data name="Project_sfd_Title" xml:space="preserve">
    <value>Select the UniPack File</value>
  </data>
  <data name="Project_Title" xml:space="preserve">
    <value>Loading The Ableton Project File...</value>
  </data>
  <data name="Sound_Loaded" xml:space="preserve">
    <value>Sounds Loaded!</value>
  </data>
  <data name="Sound_ofd_Filter" xml:space="preserve">
    <value>wav sound files|*.wav|mp3 sounds files|*.mp3|All Sound Files|*.*</value>
  </data>
  <data name="Sound_ofd_Title" xml:space="preserve">
    <value>Select Sounds</value>
  </data>
  <data name="Sound_Open" xml:space="preserve">
    <value>Loading Sound Files... ({0} / {1})</value>
  </data>
  <data name="Sound_Open_Title" xml:space="preserve">
    <value>Loading Sound Files</value>
  </data>
</root>